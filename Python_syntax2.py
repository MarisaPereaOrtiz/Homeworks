# -*- coding: utf-8 -*-
"""Copy of Python Syntax2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1eM_hGSiUd6ZSKzOXSb_4N-MI6bGd2fHj

# Intro to Python Syntax, Part 2
## Collections

## Grouping Together Your Data into a Collection
Python also has operators for collecting related data together.  Most of this course will revolve around the pros and cons of different ways of collecting data, but let's take a look at them:

| "tuple" (fixed sequence) | "list" (changeable sequence) | "str" (sequence of text characters) | "bytes" (sequence of bytes) |  "set" {mathematical set)  | "dict" (key-value mapping) | 
| :---------:| :----:    | :--------:    | :--------:    | :--------:    | :--------:    |
|  (1, 2, 3) | [1, 2, 3] | "123" '123' | b"123" b'123' | {1, 2, 3} | {1: 2, 3: 4}  |

#### Exercises: Making Collections

Make four difference types of sequences, each containing only the numbers from 1 to 5.
"""

(1,2,3,5)

[5,4,3]

'12345'

{1:5,2:4}

"""Make a sequence containing 3 names of people in this class."""

['Marina','Farihaz','Pablo']

"""Make a list of four animals, ordering them by size."""

['whale','elephant','lion','dog']

"""Make a mapping of classmates and colors, relating each classmate to their favorite color."""

{'Marisa':'blue','Samahs':'green','John':'red'}

"""Make a mapping of colors to names, relating each color to the people that like it"""

{'blue':'Marisa','green':'Samahs','red':'John'}

"""Collect the set of all letters in your first name."""

{'m','a','r','i','s','a'}

"""List examples of each type of collection in Python."""

(x,y,z)
[x,y,z]
'abcd'
b'abcd'
{x,y,z}
{name:'Marisa',gender='female'}

"""Sequences, in particular, have some interesting properties can be concatenated together with the '+' operator:

```python
>>> "Hello" + "World"
"HelloWorld"
```

Try concatenating three different types of sequences (containing whatever you wish)
"""

b'abc'+b'123'

[1,2,3]+[4,5,6]

(2,3)+(10,20)

"""### Transforming Collections

Although we've mostly used operators to make collections, there are also functions that can change one type of collection to another type:

|               | tuple   | list     | dict   | set    | string |
| :--:          | :---:   | :---:    | :---:  | :---:  | :---:  |
| **function:** | tuple() | list()   | dict() | set()  | str()  |
| **operator:** |  ()     |  []      |  {}    |  {}    |   ""   |

**Exercises**: Given a collection, change it into the requested type:

1. list
"""

list((1, 2, 3))

"""2. set"""

set(("a", "b", "a", "c", "b"))

"""3. string"""

str([1, 2, 3, 4])

"""4. list"""

list("1234")

"""5. Tuple"""

tuple("Hello, World!")

"""6. Dict"""

dict([(1, 2), (2, 3), (3, 4)])

"""6. Set"""

set({'a': 1, 'b': 2, 'c': 3})

"""7. Discussion: Why does Python give an error when trying to change this list into a dict?"""

dict([1,2,3,4,5])

"""**Comment (MPO):** The list has not correlation between the different elements, something like keys and values pairs, e.g. dict(a=1,b=2,c=3,d=4).

## Extracting Data From a Collection

Data can be indexed/queried/extracted from collectoins using the square brackets: [ ]

In sequences, putting a number inside the the brackets extracts the nth (counting from zero) value
```python
>>> (1, 2, 3)[1]
2

>>> (1, 2, 3)[0]
1

>>> (1, 2, 3)[-1]
3
```

You can "slice" a sequence (get all from one index to another index) using the colon [:]
```python
>>> (10, 20, 30, 40, 50, 60)[1:3]
(20, 30)

>>> (10, 20, 30, 40, 50, 60)[:3]
(10, 20, 30)

>>> (10, 20, 30, 40, 50, 60)[3:]
(40, 50, 60)
```

In dicts, putting the key inside the brackets returns the associated value.
```python
>>> {'a': 3, 'b': 4}['a']
3

>>> {'a': 3, 'b': 4}['b']
4
```

## Indexing Exercises

Using the example dataset *scores*, select only the described elements from each list:

0. The first score
"""

(0.2, 0.3, 0.9, 1.1, 2.2, 2.9, 0.0, 0.7, 1.3, 0.3, 0.5, 0.1, 0.0)[0]

"""1. The third score"""

(0.2, 0.3, 0.9, 1.1, 2.2, 2.9, 0.0, 0.7, 1.3, 0.3, 0.5, 0.1, 0.0)[2]

"""2. The last score"""

(0.2, 0.3, 0.9, 1.1, 2.2, 2.9, 0.0, 0.7, 1.3, 0.3, 0.5, 0.1, 0.0)[-1]

"""2a. The 3rd from the last score"""

(0.2, 0.3, 0.9, 1.1, 2.2, 2.9, 0.0, 0.7, 1.3, 0.3, 0.5, 0.1, 0.0)[-3]

"""3. The 2nd through 5th score"""

(0.2, 0.3, 0.9, 1.1, 2.2, 2.9, 0.0, 0.7, 1.3, 0.3, 0.5, 0.1, 0.0)[1:5]

"""4. Every second score (the first, third, fifth, etc)"""

(0.2, 0.3, 0.9, 1.1, 2.2, 2.9, 0.0, 0.7, 1.3, 0.3, 0.5, 0.1, 0.0)[::2]

"""5. Every score after the 4th score"""

(0.2, 0.3, 0.9, 1.1, 2.2, 2.9, 0.0, 0.7, 1.3, 0.3, 0.5, 0.1, 0.0)[4:]

"""6. Every second score from the 2nd to the 8th."""

(0.2, 0.3, 0.9, 1.1, 2.2, 2.9, 0.0, 0.7, 1.3, 0.3, 0.5, 0.1, 0.0)[1:8:2]

"""7. Every score except the first and last."""

(0.2, 0.3, 0.9, 1.1, 2.2, 2.9, 0.0, 0.7, 1.3, 0.3, 0.5, 0.1, 0.0)[1:-1]

"""## Aggregating Your Collections into Single Values (Descriptive Statistics)

Python can use named **functions** that turn data into something else.  By doing this repeatedly, in sequence, we can build data processing pipelines!

Functions in Python have the following syntax:

```
output = function(input)
```

First, let's look at some **built-in** functions to get a sense of how they work:  **min()**, **max()**, **sum()**, and **len()**:

```python
>>> min([1, 2, 3, 2])
1

>>> max([1, 2, 3, 2])
3

>>> sum([1, 2, 3, 2])
8

>>> len([1, 2, 3, 2])
4
```

### Exercises: 
Read the following lines of Python and predict their output.  Then, run the code to see if you were correct.

```python
min([3, 6, 5, 2]) = 2
```
"""

min([3,6,5,2])

"""```python
max([3, 6, 5, 2][2:])
```
"""

max([3,6,5,2][2:])

"""```python
min([max((2, 4, 1)), len((2, 4, 1)), min(2, 4, 1)]) = 1
```
"""

min([max((2, 4, 1)), len((2, 4, 1)), min(2, 4, 1)])

"""```python
(min([1, 2]), max([3, 4, 5])) = (1,5)
```
"""

(min([1, 2]), max([3, 4, 5]))

"""```python
max([1, 2, 3, 4, 5, 6][1:3]) = 4
```
"""

max([1, 2, 3, 4, 5, 6][1:3])

"""```python
len({3, 4, 5, 5, 4}) = 5
```
"""

len({3, 4, 5, 5, 4})

"""```python
len({1: 2, 3: 4, 5: 6, 7: 8})
```
"""

len({1:2,3:4,5:6,7:8})

"""### Discussion: sum() of strings
In Python, why does this work:
"""

"Hi" + "Bye"

"""... but not this:"""

sum(["Hi", "Bye"])

"""What are some mental models we can use to reason about this difference in behavior?  And what does the error mean?

**MPO**: the "sum" funtion do not support adition with *strings* just with *numbers*
"""

sum((1,2))

